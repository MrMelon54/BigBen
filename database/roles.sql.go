// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: roles.sql

package database

import (
	"context"
	"strings"

	snowflake "github.com/disgoorg/snowflake/v2"
)

const addRole = `-- name: AddRole :exec
INSERT INTO roles (guild_id, message_id, role_id, user_id)
VALUES (?, ?, ?, ?)
`

type AddRoleParams struct {
	GuildID   snowflake.ID `json:"guild_id"`
	MessageID snowflake.ID `json:"message_id"`
	RoleID    snowflake.ID `json:"role_id"`
	UserID    snowflake.ID `json:"user_id"`
}

func (q *Queries) AddRole(ctx context.Context, arg AddRoleParams) error {
	_, err := q.db.ExecContext(ctx, addRole,
		arg.GuildID,
		arg.MessageID,
		arg.RoleID,
		arg.UserID,
	)
	return err
}

const deleteRoles = `-- name: DeleteRoles :exec
DELETE
FROM roles
WHERE id IN (/*SLICE:role_ids*/?)
`

func (q *Queries) DeleteRoles(ctx context.Context, roleIds []int32) error {
	query := deleteRoles
	var queryParams []interface{}
	if len(roleIds) > 0 {
		for _, v := range roleIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:role_ids*/?", strings.Repeat(",?", len(roleIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:role_ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const getRoleLogs = `-- name: GetRoleLogs :many
SELECT id, guild_id, message_id, role_id, user_id
FROM roles
WHERE guild_id = ?
  AND message_id != ?
`

type GetRoleLogsParams struct {
	GuildID   snowflake.ID `json:"guild_id"`
	MessageID snowflake.ID `json:"message_id"`
}

func (q *Queries) GetRoleLogs(ctx context.Context, arg GetRoleLogsParams) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRoleLogs, arg.GuildID, arg.MessageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.GuildID,
			&i.MessageID,
			&i.RoleID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
