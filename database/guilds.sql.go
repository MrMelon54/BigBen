// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: guilds.sql

package database

import (
	"context"

	snowflake "github.com/disgoorg/snowflake/v2"
)

const getAllGuilds = `-- name: GetAllGuilds :many
SELECT id, bong_channel_id, bong_webhook_id, bong_webhook_token, bong_role_id, bong_emoji
FROM guilds
`

func (q *Queries) GetAllGuilds(ctx context.Context) ([]Guild, error) {
	rows, err := q.db.QueryContext(ctx, getAllGuilds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Guild
	for rows.Next() {
		var i Guild
		if err := rows.Scan(
			&i.ID,
			&i.BongChannelID,
			&i.BongWebhookID,
			&i.BongWebhookToken,
			&i.BongRoleID,
			&i.BongEmoji,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGuild = `-- name: GetGuild :one
SELECT id, bong_channel_id, bong_webhook_id, bong_webhook_token, bong_role_id, bong_emoji
FROM guilds
WHERE id = ?
`

func (q *Queries) GetGuild(ctx context.Context, id snowflake.ID) (Guild, error) {
	row := q.db.QueryRowContext(ctx, getGuild, id)
	var i Guild
	err := row.Scan(
		&i.ID,
		&i.BongChannelID,
		&i.BongWebhookID,
		&i.BongWebhookToken,
		&i.BongRoleID,
		&i.BongEmoji,
	)
	return i, err
}

const updateGuild = `-- name: UpdateGuild :exec
REPLACE INTO guilds (id, bong_channel_id, bong_webhook_id, bong_webhook_token, bong_role_id, bong_emoji)
VALUES (?, ?, ?, ?, ?, ?)
`

type UpdateGuildParams struct {
	ID               snowflake.ID `json:"id"`
	BongChannelID    snowflake.ID `json:"bong_channel_id"`
	BongWebhookID    snowflake.ID `json:"bong_webhook_id"`
	BongWebhookToken string       `json:"bong_webhook_token"`
	BongRoleID       snowflake.ID `json:"bong_role_id"`
	BongEmoji        string       `json:"bong_emoji"`
}

func (q *Queries) UpdateGuild(ctx context.Context, arg UpdateGuildParams) error {
	_, err := q.db.ExecContext(ctx, updateGuild,
		arg.ID,
		arg.BongChannelID,
		arg.BongWebhookID,
		arg.BongWebhookToken,
		arg.BongRoleID,
		arg.BongEmoji,
	)
	return err
}
